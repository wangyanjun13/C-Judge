// vite.config.js
import { defineConfig } from "file:///app/node_modules/vite/dist/node/index.js";
import vue from "file:///app/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import path from "path";
var __vite_injected_original_dirname = "/app";
var vite_config_default = defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  server: {
    host: "0.0.0.0",
    port: 3e3,
    proxy: {
      "/api": {
        target: "http://backend:8000",
        changeOrigin: true,
        secure: false,
        followRedirects: true,
        rewrite: (path2) => path2,
        timeout: 1e4,
        // 减少超时时间，更快地失败
        configure: (proxy, options) => {
          let retries = {};
          const MAX_RETRIES = 2;
          proxy.on("error", (err, req, res) => {
            const url = req.url;
            console.log("\u4EE3\u7406\u9519\u8BEF", err);
            if ((err.code === "ECONNREFUSED" || err.code === "ECONNRESET") && (!retries[url] || retries[url] < MAX_RETRIES)) {
              retries[url] = (retries[url] || 0) + 1;
              console.log(`\u91CD\u8BD5\u8BF7\u6C42 ${url} (${retries[url]}/${MAX_RETRIES})`);
              if (!res.headersSent && !res.writableEnded) {
                res.writeHead(503, {
                  "Content-Type": "application/json"
                });
                res.end(JSON.stringify({
                  error: "Service temporarily unavailable",
                  message: "Backend connection failed"
                }));
              }
            }
          });
          proxy.on("proxyReq", (proxyReq, req, res) => {
            console.log("\u4EE3\u7406\u8BF7\u6C42", req.url);
          });
          proxy.on("proxyRes", (proxyRes, req, res) => {
            console.log("\u4EE3\u7406\u54CD\u5E94", req.url, proxyRes.statusCode);
            if (retries[req.url]) {
              delete retries[req.url];
            }
          });
        }
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvYXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvYXBwL3ZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9hcHAvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJ1xyXG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSdcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuXHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgcGx1Z2luczogW3Z1ZSgpXSxcclxuICByZXNvbHZlOiB7XHJcbiAgICBhbGlhczoge1xyXG4gICAgICAnQCc6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL3NyYycpLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHNlcnZlcjoge1xyXG4gICAgaG9zdDogJzAuMC4wLjAnLFxyXG4gICAgcG9ydDogMzAwMCxcclxuICAgIHByb3h5OiB7XHJcbiAgICAgICcvYXBpJzoge1xyXG4gICAgICAgIHRhcmdldDogJ2h0dHA6Ly9iYWNrZW5kOjgwMDAnLFxyXG4gICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcclxuICAgICAgICBzZWN1cmU6IGZhbHNlLFxyXG4gICAgICAgIGZvbGxvd1JlZGlyZWN0czogdHJ1ZSxcclxuICAgICAgICByZXdyaXRlOiAocGF0aCkgPT4gcGF0aCxcclxuICAgICAgICB0aW1lb3V0OiAxMDAwMCwgIC8vIFx1NTFDRlx1NUMxMVx1OEQ4NVx1NjVGNlx1NjVGNlx1OTVGNFx1RkYwQ1x1NjZGNFx1NUZFQlx1NTczMFx1NTkzMVx1OEQyNVxyXG4gICAgICAgIGNvbmZpZ3VyZTogKHByb3h5LCBvcHRpb25zKSA9PiB7XHJcbiAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTkxQ0RcdThCRDVcdTZCMjFcdTY1NzBcclxuICAgICAgICAgIGxldCByZXRyaWVzID0ge307XHJcbiAgICAgICAgICBjb25zdCBNQVhfUkVUUklFUyA9IDI7XHJcblxyXG4gICAgICAgICAgcHJveHkub24oJ2Vycm9yJywgKGVyciwgcmVxLCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gcmVxLnVybDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NEVFM1x1NzQwNlx1OTUxOVx1OEJFRicsIGVycik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUzRUFcdTY3MDlcdTcyNzlcdTVCOUFcdTk1MTlcdThCRUZcdTYyNERcdTVDMURcdThCRDVcdTkxQ0RcdThCRDVcclxuICAgICAgICAgICAgaWYgKChlcnIuY29kZSA9PT0gJ0VDT05OUkVGVVNFRCcgfHwgZXJyLmNvZGUgPT09ICdFQ09OTlJFU0VUJykgJiYgXHJcbiAgICAgICAgICAgICAgICAoIXJldHJpZXNbdXJsXSB8fCByZXRyaWVzW3VybF0gPCBNQVhfUkVUUklFUykpIHtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICByZXRyaWVzW3VybF0gPSAocmV0cmllc1t1cmxdIHx8IDApICsgMTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5MUNEXHU4QkQ1XHU4QkY3XHU2QzQyICR7dXJsfSAoJHtyZXRyaWVzW3VybF19LyR7TUFYX1JFVFJJRVN9KWApO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIFx1OTYzMlx1NkI2Mlx1NURGMlx1NTE3M1x1OTVFRFx1NzY4NFx1NTRDRFx1NUU5NFxyXG4gICAgICAgICAgICAgIGlmICghcmVzLmhlYWRlcnNTZW50ICYmICFyZXMud3JpdGFibGVFbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU4RkQ0XHU1NkRFXHU5NTE5XHU4QkVGXHU1NENEXHU1RTk0XHU4MDBDXHU0RTBEXHU2NjJGXHU2MzAyXHU4RDc3XHJcbiAgICAgICAgICAgICAgICByZXMud3JpdGVIZWFkKDUwMywge1xyXG4gICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICBlcnJvcjogJ1NlcnZpY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUnLFxyXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQmFja2VuZCBjb25uZWN0aW9uIGZhaWxlZCdcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBwcm94eS5vbigncHJveHlSZXEnLCAocHJveHlSZXEsIHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTRFRTNcdTc0MDZcdThCRjdcdTZDNDInLCByZXEudXJsKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBwcm94eS5vbigncHJveHlSZXMnLCAocHJveHlSZXMsIHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTRFRTNcdTc0MDZcdTU0Q0RcdTVFOTQnLCByZXEudXJsLCBwcm94eVJlcy5zdGF0dXNDb2RlKTtcclxuICAgICAgICAgICAgLy8gXHU2MjEwXHU1MjlGXHU3Njg0XHU4QkY3XHU2QzQyXHU2RTA1XHU5NjY0XHU5MUNEXHU4QkQ1XHU4QkExXHU2NTcwXHJcbiAgICAgICAgICAgIGlmIChyZXRyaWVzW3JlcS51cmxdKSB7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHJldHJpZXNbcmVxLnVybF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxufSlcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE4TCxTQUFTLG9CQUFvQjtBQUMzTixPQUFPLFNBQVM7QUFDaEIsT0FBTyxVQUFVO0FBRmpCLElBQU0sbUNBQW1DO0FBS3pDLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQSxFQUNmLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLEtBQUssS0FBSyxRQUFRLGtDQUFXLE9BQU87QUFBQSxJQUN0QztBQUFBLEVBQ0Y7QUFBQSxFQUNBLFFBQVE7QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxNQUNMLFFBQVE7QUFBQSxRQUNOLFFBQVE7QUFBQSxRQUNSLGNBQWM7QUFBQSxRQUNkLFFBQVE7QUFBQSxRQUNSLGlCQUFpQjtBQUFBLFFBQ2pCLFNBQVMsQ0FBQ0EsVUFBU0E7QUFBQSxRQUNuQixTQUFTO0FBQUE7QUFBQSxRQUNULFdBQVcsQ0FBQyxPQUFPLFlBQVk7QUFFN0IsY0FBSSxVQUFVLENBQUM7QUFDZixnQkFBTSxjQUFjO0FBRXBCLGdCQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssS0FBSyxRQUFRO0FBQ25DLGtCQUFNLE1BQU0sSUFBSTtBQUNoQixvQkFBUSxJQUFJLDRCQUFRLEdBQUc7QUFHdkIsaUJBQUssSUFBSSxTQUFTLGtCQUFrQixJQUFJLFNBQVMsa0JBQzVDLENBQUMsUUFBUSxHQUFHLEtBQUssUUFBUSxHQUFHLElBQUksY0FBYztBQUVqRCxzQkFBUSxHQUFHLEtBQUssUUFBUSxHQUFHLEtBQUssS0FBSztBQUNyQyxzQkFBUSxJQUFJLDRCQUFRLEdBQUcsS0FBSyxRQUFRLEdBQUcsQ0FBQyxJQUFJLFdBQVcsR0FBRztBQUcxRCxrQkFBSSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksZUFBZTtBQUUxQyxvQkFBSSxVQUFVLEtBQUs7QUFBQSxrQkFDakIsZ0JBQWdCO0FBQUEsZ0JBQ2xCLENBQUM7QUFDRCxvQkFBSSxJQUFJLEtBQUssVUFBVTtBQUFBLGtCQUNyQixPQUFPO0FBQUEsa0JBQ1AsU0FBUztBQUFBLGdCQUNYLENBQUMsQ0FBQztBQUFBLGNBQ0o7QUFBQSxZQUNGO0FBQUEsVUFDRixDQUFDO0FBRUQsZ0JBQU0sR0FBRyxZQUFZLENBQUMsVUFBVSxLQUFLLFFBQVE7QUFDM0Msb0JBQVEsSUFBSSw0QkFBUSxJQUFJLEdBQUc7QUFBQSxVQUM3QixDQUFDO0FBRUQsZ0JBQU0sR0FBRyxZQUFZLENBQUMsVUFBVSxLQUFLLFFBQVE7QUFDM0Msb0JBQVEsSUFBSSw0QkFBUSxJQUFJLEtBQUssU0FBUyxVQUFVO0FBRWhELGdCQUFJLFFBQVEsSUFBSSxHQUFHLEdBQUc7QUFDcEIscUJBQU8sUUFBUSxJQUFJLEdBQUc7QUFBQSxZQUN4QjtBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0g7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogWyJwYXRoIl0KfQo=
